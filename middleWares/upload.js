const multer = require('multer'); // парсить payload і завантажує файл.
const path = require('path');

const tempDir = path.join(__dirname, '../', 'tmp');

// Об'єкт налаштувань multer-a
const multerConfig = multer.diskStorage({
  // шлях до теки, в якій будемо зберігати тимчасовий файл
  // Можна і просто написати "./", але краще через path, бо різні є системи
  destination: tempDir, // тут теж можна вказати ф-ю. Наприклад, (req, file, cb) => {...}

  // налаштування - filename.
  // Туди передаємо функцію, яка зберігає файл під іншим ім'ям
  // У функцію передається об'єкт request, об'єкт файл і колбек (cb).
  // file - це файл у пам'яті.
  // Тобто колбек filename-а (cb) спрацьовує коли multer отримав file, зберіг його у пам'яті, але ще не зберіг його на диску
  filename: (req, file, cb) => {
    // Перший параметр null (означає, що немає помилок). Другий параметр - ім'я файлу, під яким я хочу його зберегти
    cb(null, `${+new Date()}_${file.originalname}`); // завантажує файл у tempDir (/tmp)
    // файл зберігається під оригінальним ім'ям. Тобто в цьому випадку запис "filename: ..." ніби не потрібен. Але без нього файл зберігається під випадковим ім'ям без розширення, хоча його дані правильні.

    // new Date(); - додаємо до імені дату файлу, щоби один й той самий файл мав різні імена
    // +new Date(); - замість довгої дати робить цифровий код timestamp
  },
  // Налаштування limit дозволяє зробити певні обмеження

  // limits: {
  //   fileSize: 100, // дозволено завантажувати файли не більше 100 байт. Інакше буде помилка "File too large"
  // },
});

// Створення middleware для зберігання
const upload = multer({
  storage: multerConfig,
});

module.exports = upload;
